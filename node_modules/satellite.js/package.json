{
  "_from": "satellite.js",
  "_id": "satellite.js@3.0.1",
  "_inBundle": false,
  "_integrity": "sha512-6oXEOHM3thTZvYh5OzEtXDuJGC9bBLVGVXA0KO1iuF1vlQP7TXHbxFalyVsHOfBWsZY6pfjjCiIAMnFG0sbmEA==",
  "_location": "/satellite.js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "satellite.js",
    "fetchSpec": "latest",
    "name": "satellite.js",
    "raw": "satellite.js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/satellite.js/-/satellite.js-3.0.1.tgz",
  "_shasum": "8eeda238624ea06405323e73f49603072d53a1eb",
  "_spec": "satellite.js",
  "_where": "/home/maxwell/Documents/timara202/final",
  "author": {
    "email": "shashwatak@gmail.com",
    "name": "Shashwat Kandadai",
    "url": "https://github.com/shashwatak"
  },
  "bugs": {
    "url": "https://github.com/shashwatak/satellite-js/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Dmitriy Pushkov",
      "email": "ezze@ezze.org",
      "url": "http://www.ezze.org"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "SGP4/SDP4 calculation library",
  "devDependencies": {
    "@babel/cli": "^7.1.5",
    "@babel/core": "^7.1.6",
    "@babel/plugin-proposal-class-properties": "^7.1.0",
    "@babel/plugin-proposal-json-strings": "^7.0.0",
    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
    "@babel/plugin-syntax-import-meta": "^7.0.0",
    "@babel/preset-env": "^7.1.6",
    "@babel/register": "^7.0.0",
    "chai": "^4.2.0",
    "chokidar": "^2.0.4",
    "copyfiles": "^2.1.0",
    "coveralls": "^3.0.2",
    "cross-env": "^5.2.0",
    "eslint": "^5.9.0",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-plugin-import": "^2.14.0",
    "glob": "^7.1.3",
    "istanbul": "^1.1.0-alpha.1",
    "mocha": "^5.2.0",
    "prepend-file": "^1.3.1",
    "rimraf": "^2.6.2",
    "rollup": "^0.67.3",
    "rollup-plugin-babel": "^4.0.3",
    "rollup-plugin-uglify": "^6.0.0",
    "uglify-es": "^3.3.9"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "homepage": "https://github.com/shashwatak/satellite-js",
  "jsnext:main": "dist/satellite.es.js",
  "keywords": [
    "satellite",
    "sgp4"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "module": "dist/satellite.es.js",
  "name": "satellite.js",
  "optionalDependencies": {},
  "readme": "# satellite.js\n\n[![NPM version](https://img.shields.io/npm/v/satellite.js.svg)](https://www.npmjs.com/package/satellite.js)\n[![Downloads/month](https://img.shields.io/npm/dm/satellite.js.svg)](https://www.npmjs.com/package/satellite.js)\n[![Build Status](https://img.shields.io/travis/shashwatak/satellite-js/develop.svg)](https://travis-ci.org/shashwatak/satellite-js)\n[![Coverage Status](https://img.shields.io/coveralls/github/shashwatak/satellite-js/develop.svg)](https://coveralls.io/github/shashwatak/satellite-js?branch=develop)\n[![Gitter chat](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/satellite-js/Lobby)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](LICENSE.md)\n\n## Introduction\n\nA library to make satellite propagation via TLEs possible in the web.\nProvides the functions necessary for SGP4/SDP4 calculations, as callable javascript. Also provides\nfunctions for coordinate transforms.\n\nThe internals of this library are nearly identical to\n[Brandon Rhode's sgp4 python library](https://pypi.python.org/pypi/sgp4/). However, it is encapsulated in a\nstandard JS library (self executing function), and exposes only the functionality needed to track satellites and\npropagate paths. The only changes I made to Brandon Rhode's code was to change the positional parameters of\nfunctions to key:value objects. This reduces the complexity of functions that require 50+ parameters,\nand doesn't require the parameters to be placed in the exact order.\n\nSpecial thanks to all contributors for improving usability and bug fixes :)\n\n- [ezze (Dmitriy Pushkov)](https://github.com/ezze)\n- [davidcalhoun (David Calhoun)](https://github.com/davidcalhoun)\n- [tikhonovits (Nikos Sagias)](https://github.com/tikhonovits)\n- [dangodev (Drew Powers)](https://github.com/dangodev)\n- [thkruz (Theodore Kruczek)](https://github.com/thkruz)\n- [bakercp (Christopher Baker)](https://github.com/bakercp)\n- [drom (Aliaksei Chapyzhenka)](https://github.com/drom)\n- [PeterDaveHello (Peter Dave Hello)](https://github.com/PeterDaveHello)\n- [nhamer](https://github.com/nhamer)\n- [owntheweb](https://github.com/owntheweb)\n- [Zigone](https://github.com/Zigone)\n\nIf you want to contribute to the project please read the [Contributing](#contributing) section first.\n\nSites using the library can be found [here](https://github.com/shashwatak/satellite-js/wiki/Sites-using-satellite.js).\n\n**Start Here:**\n\n- [TS Kelso's Columns for Satellite Times](http://celestrak.com/columns/), Orbital Propagation Parts I and II a must!\n- [Wikipedia: Simplified Perturbations Model](http://en.wikipedia.org/wiki/Simplified_perturbations_models)\n- [SpaceTrack Report #3, by Hoots and Roehrich](http://celestrak.com/NORAD/documentation/spacetrk.pdf).\n\nThe javascript in this library is heavily based (straight copied) from:\n\n- The python [sgp4 1.1 by Brandon Rhodes](https://pypi.python.org/pypi/sgp4/)\n- The C++ code by [David Vallado, et al](http://www.celestrak.com/publications/AIAA/2006-6753/)\n\nI've included the original PKG-INFO file from the python library.\n\nThe coordinate transforms are based off T.S. Kelso's columns:\n\n- [Part I](http://celestrak.com/columns/v02n01/)\n- [Part II](http://celestrak.com/columns/v02n02/)\n- [Part III](http://celestrak.com/columns/v02n03/)\n\nAnd the coursework for UC Boulder's ASEN students\n- [Coodinate Transforms @ UC Boulder](http://ccar.colorado.edu/ASEN5070/handouts/coordsys.doc)\n\nI would recommend anybody interested in satellite tracking or orbital propagation to read\n[all of TS Kelso's columns](http://celestrak.com/columns/). Without his work, this project would not be possible.\n\nGet a free [Space Track account](https://www.space-track.org/auth/login) and download your own up to date TLEs\nfor use with this library.\n\n## Installation\n\nInstall the library with [NPM](https://www.npmjs.com/):\n\n```bash\nnpm install satellite.js\n```\n\nInstall the library with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add satellite.js\n```\n\nInstall the library with [Bower](http://bower.io/):\n\n```bash\nbower install satellite.js\n```\n\n**Warning!**\n\n`satellite.js` version 1.3.0 is the latest one for Bower since it has been deprecated.\n\n## Usage\n\n### Common.js ([Node.js](https://nodejs.org))\n\n```js\nvar satellite = require('satellite.js');\n...\nvar positionAndVelocity = satellite.sgp4(satrec, time);\n```\n\n### ES ([Babel.js](https://babeljs.io/))\n\n```js\nimport { sgp4 } from 'satellite.js';\n...\nconst positionAndVelocity = sgp4(satrec, time);\n```\n\n### AMD ([Require.js](http://requirejs.org/))\n\n```js\ndefine(['path/to/dist/satellite'], function(satellite) {\n    ...\n    var positionAndVelocity = satellite.sgp4(satrec, time);\n});\n```\n\n[Here is a repo](https://github.com/solarpatrol/satellite-requirejs) showing basic library usage with Require.js.\n\n### Script tag\n\nInclude `dist/satellite.min.js` as a script in your html:\n\n```html\n<script src=\"path/to/dist/satellite.min.js\"></script>\n```\n\n`satellite` object will be available in global scope:\n\n```js\nvar positionAndVelocity = satellite.sgp4(satrec, time);\n```\n\n## Sample Usage\n    \n```js\n// Sample TLE\nvar tleLine1 = '1 25544U 98067A   13149.87225694  .00009369  00000-0  16828-3 0  9031',\n    tleLine2 = '2 25544 051.6485 199.1576 0010128 012.7275 352.5669 15.50581403831869';\n\n// Initialize a satellite record\nvar satrec = satellite.twoline2satrec(tleLine1, tleLine2);\n\n//  Propagate satellite using time since epoch (in minutes).\nvar positionAndVelocity = satellite.sgp4(satrec, timeSinceTleEpochMinutes);\n\n//  Or you can use a JavaScript Date\nvar positionAndVelocity = satellite.propagate(satrec, new Date());\n\n// The position_velocity result is a key-value pair of ECI coordinates.\n// These are the base results from which all other coordinates are derived.\nvar positionEci = positionAndVelocity.position,\n    velocityEci = positionAndVelocity.velocity;\n\n// Set the Observer at 122.03 West by 36.96 North, in RADIANS\nvar observerGd = {\n    longitude: satellite.degreesToRadians(-122.0308),\n    latitude: satellite.degreesToRadians(36.9613422),\n    height: 0.370\n};\n\n// You will need GMST for some of the coordinate transforms.\n// http://en.wikipedia.org/wiki/Sidereal_time#Definition\nvar gmst = satellite.gstime(new Date());\n\n// You can get ECF, Geodetic, Look Angles, and Doppler Factor.\nvar positionEcf   = satellite.eciToEcf(positionEci, gmst),\n    observerEcf   = satellite.geodeticToEcf(observerGd),\n    positionGd    = satellite.eciToGeodetic(positionEci, gmst),\n    lookAngles    = satellite.ecfToLookAngles(observerGd, positionEcf),\n    dopplerFactor = satellite.dopplerFactor(observerCoordsEcf, positionEcf, velocityEcf);\n\n// The coordinates are all stored in key-value pairs.\n// ECI and ECF are accessed by `x`, `y`, `z` properties.\nvar satelliteX = positionEci.x,\n    satelliteY = positionEci.y,\n    satelliteZ = positionEci.z;\n\n// Look Angles may be accessed by `azimuth`, `elevation`, `range_sat` properties.\nvar azimuth   = lookAngles.azimuth,\n    elevation = lookAngles.elevation,\n    rangeSat  = lookAngles.rangeSat;\n\n// Geodetic coords are accessed via `longitude`, `latitude`, `height`.\nvar longitude = positionGd.longitude,\n    latitude  = positionGd.latitude,\n    height    = positionGd.height;\n\n//  Convert the RADIANS to DEGREES for pretty printing (appends \"N\", \"S\", \"E\", \"W\", etc).\nvar longitudeStr = satellite.degreesLong(longitude),\n    latitudeStr  = satellite.degreesLat(latitude);\n```\n    \n## Contributing\n\nThis repo follows [Gitflow Workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow).\nBefore starting a work on new [pull request](https://github.com/shashwatak/satellite-js/compare), please, checkout your\nfeature or bugfix branch from `develop` branch:\n\n```bash\ngit checkout develop\ngit fetch origin\ngit merge origin/develop\ngit checkout -b my-feature\n```\n\nMake sure that your changes don't brake the existing code by running\n\n```bash\nnpm test\n```\n\nand that your code follows [Airbnb](https://www.npmjs.com/package/eslint-config-airbnb-base) style\n\n```bash\nnpm run lint\nnpm run lint:test\n```\n\nImplementing new functions or features, please, if possible, provide tests to cover them and mention your works\nin [Changelog](CHANGELOG.md).\n\nIn order to get test code coverage run the following:\n\n```bash\nnpm run test:coverage\n```\n\n## Building\n\nThe source code is organized as Common.js modules and uses [ES6 syntax](http://es6-features.org/).\n\nIn order to build the library follow these steps:\n\n- install [Node.js](https://nodejs.org/) and [Node Package Manager](https://www.npmjs.com/);\n\n- install all required packages with NPM by running the following command from repository's root directory:\n\n    ```bash\n    npm install\n    ```\n\n- run the following NPM script to build everything:\n\n    ```bash\n    npm run build\n    ```\n\n- run the following NPM script to run test specs `test/*.spec.js` files with [Mocha](https://mochajs.org/):\n\n    ```bash\n    npm test\n    ```\n\nThese is a full list of all available NPM scripts:\n\n- `build`           builds everything;\n- `transpile`       transpiles ES source files located in `src` directory to Common.js compatible modules and saves\n                    the resulting files in `lib` directory;\n- `dist`            builds ES and UMD modules in `dist` directory;\n- `dist:es`         builds ES module in `dist` directory;\n- `dist:umd`        builds [UMD](https://github.com/umdjs/umd) module in `dist` directory (both non-compressed and\n                    compressed versions);\n- `dist:umd:dev`    builds non-compressed version of UMD module in `dist` directory;\n- `dist:umd:prod`   builds compressed version of UMD module in `dist` directory; \n- `watch:es`        watches for changes in `src` directory and automatically rebuilds ES module;\n- `copy`            copies built library from `dist` to [SGP4 verification](#benchmarking) application's directory;\n- `lint`            lints sources code located in `src` directory with [ESLint](http://eslint.org/) with\n                    [Airbnb shared configuration]((https://www.npmjs.com/package/eslint-config-airbnb));\n- `lint:test`       lints tests located in `test` directory with ESLint;\n- `test`            runs tests;\n- `test:coverage`   runs tests with [Istanbul](https://github.com/gotwarlost/istanbul) coverage summary;\n- `test:coveralls`  runs tests with Istanbul coverage summary and aggregates the results by\n                    [Coveralls](https://coveralls.io/github/shashwatak/satellite-js); in order to run it locally\n                    `COVERALLS_REPO_TOKEN` is required:\n                    \n    ```\n    COVERALLS_REPO_TOKEN=<token> npm run test:coveralls\n    ```\n\n## TODO\n\nOptional functions that utilize Worker Threads\n\n## Exposed Objects\n\n### satrec\n\nThe `satrec` object comes from the original code by Rhodes as well as Vallado. It is immense and complex, but the\nmost important values it contains are the Keplerian Elements and the other values pulled from the TLEs. I do not\nsuggest that anybody try to simplify it unless they have absolute understanding of Orbital Mechanics.\n\n- `satnum`      Unique satellite number given in the TLE file.\n- `epochyr`     Full four-digit year of this element set's epoch moment.\n- `epochdays`   Fractional days into the year of the epoch moment.\n- `jdsatepoch`  Julian date of the epoch (computed from `epochyr` and `epochdays`).\n- `ndot`        First time derivative of the mean motion (ignored by SGP4).\n- `nddot`       Second time derivative of the mean motion (ignored by SGP4).\n- `bstar`       Ballistic drag coefficient B* in inverse earth radii.\n- `inclo`       Inclination in radians.\n- `nodeo`       Right ascension of ascending node in radians.\n- `ecco`        Eccentricity.\n- `argpo`       Argument of perigee in radians.\n- `mo`          Mean anomaly in radians.\n- `no`          Mean motion in radians per minute.\n\n## Exposed Functions\n\n### Initialization\n\n```js\nvar satrec = satellite.twoline2satrec(longstr1, longstr2);\n```\n\nreturns satrec object, created from the TLEs passed in. The satrec object is vastly complicated, but you don't have\nto do anything with it, except pass it around.\n\nNOTE! You are responsible for providing TLEs. [Get your free Space Track account here.](https://www.space-track.org/auth/login)\nlongstr1 and longstr2 are the two lines of the TLE, properly formatted by NASA and NORAD standards. if you use\nSpace Track, there should be no problem.\n\n### Propagation\n\nBoth `propagate()` and `sgp4()` functions return position and velocity as a dictionary of the form:\n\n```json\n{\n  \"position\": { \"x\" : 1, \"y\" : 1, \"z\" : 1 },\n  \"velocity\": { \"x\" : 1, \"y\" : 1, \"z\" : 1 }\n}\n```\n\nposition is in km, velocity is in km/s, both the ECI coordinate frame.\n\n```js\nvar positionAndVelocity = satellite.propagate(satrec, new Date());\n```\n\nReturns position and velocity, given a satrec and the calendar date. Is merely a wrapper for `sgp4()`, converts the\ncalendar day to Julian time since satellite epoch. Sometimes it's better to ask for position and velocity given\na specific date.\n\n```js\nvar positionAndVelocity = satellite.sgp4(satrec, timeSinceTleEpochMinutes);\n```\n\nReturns position and velocity, given a satrec and the time in minutes since epoch. Sometimes it's better to ask for\nposition and velocity given the time elapsed since epoch.\n\n### Doppler\n\nYou can get the satellites current Doppler factor, relative to your position, using the `dopplerFactor()` function.\nUse either ECI or ECF coordinates, but don't mix them.\n\n```js\nvar dopplerFactor = satellite.dopplerFactor(observer, position, velocity);\n```\n\nSee the section on Coordinate Transforms to see how to get ECF/ECI/Geodetic coordinates.\n\n### Coordinate Transforms\n\n#### Greenwich Mean Sidereal Time\n\nYou'll need to provide some of the coordinate transform functions with your current GMST aka GSTIME. You can use\nJulian Day:\n\n```js\nvar gmst = satellite.gstime(julianDay);\n```\n\nor a JavaScript Date:\n\n```js\nvar gmst = satellite.gstime(new Date());\n```\n\n#### Transforms\n\nMost of these are self explanatory from their names. Coords are arrays of three floats EX: [1.1, 1.2, 1.3] in\nkilometers. Once again, read the following first.\n\nThe coordinate transforms are based off T.S. Kelso's columns:\n* [Part I](http://celestrak.com/columns/v02n01/)\n* [Part II](http://celestrak.com/columns/v02n02/)\n* [Part III](http://celestrak.com/columns/v02n03/)\n\nAnd the coursework for UC Boulder's ASEN students\n* [Coodinate Transforms @ UC Boulder](http://ccar.colorado.edu/ASEN5070/handouts/coordsys.doc)\n\nThese four are used to convert between ECI, ECF, and Geodetic, as you need them. ECI and ECF coordinates are in\nkm or km/s. Geodetic coords are in radians.\n\n```js\nvar ecfCoords = satellite.eciToEcf(eciCoords, gmst);\n```\n\n```js\nvar eciCoords = satellite.ecfToEci(ecfCoords, gmst);\n```\n\n```js\nvar geodeticCoords = satellite.eciToGeodetic(eciCoords, gmst);\n```\n\n```js\nvar ecfCoords = satellite.geodeticToEcf(geodeticCoords);\n```\n\nThese function is used to compute the look angle, from your geodetic position to a satellite in ECF coordinates.\nMake sure you convert the ECI output from sgp4() and propagate() to ECF first.\n\n```js\nvar lookAngles = satellite.ecfToLookAngles(observerGeodetic, satelliteEcf);\n```\n\n#### Latitude and Longitude\n\nThese two functions will return human readable Latitude or Longitude strings (Ex: \"125.35W\" or \"45.565N\")\nfrom `geodeticCoords`:\n\n```js\nvar latitudeStr = satellite.degreesLat(geodeticRadians),\n    longitudeStr = satellite.degreesLong(geodeticRadians);\n```\n\n## Note about Code Conventions\n\nLike Brandon Rhodes before me, I chose to maintain as little difference between this implementation and the prior\nworks. This is to make adapting future changes suggested by Vallado much simpler. Thus, some of the conventions\nused in this library are very weird.\n\n## How this was written\n\nI took advantage of the fact that Python and JavaScript are nearly semantically identical. Most of the code is\njust copied straight from Python. Brandon Rhodes did me the favor of including semi-colons on most of the lines of\ncode. JavaScript doesn't support multiple values returned per statement, so I had to rewrite the function calls.\nAbsolutely none of the mathematical logic had to be rewritten.\n\n## Benchmarking\n\nI've included a small testing app, that provides some benchmarking tools and verifies SGP4 and SDP4 using the\nTest Criteria provided by SpaceTrack Report #3, and is based off\n[System Benchmarking](http://celestrak.com/columns/v02n04/) by TS Kelso.\n\nThe testing app is a Chrome Packaged App that uses the `angular.js` framework.\n\nBefore running the app build the library and copy resulting files from `dist` directory to app's directory with\nthe following command:\n\n```bash\nnpm run copy\n```\n\nTo run the test, open up Chrome, go to the extensions page, and check \"Developer Mode\". Then, click \"Load Unpacked App\",\nand select the `sgp4_verification` folder. Then run the app from within Chrome. The test file is located within\nthe `sgp4_verification` directory, as a JSON file called `spacetrack-report-3.json`.\n\n## Acknowledgments\n\nMajor thanks go to Brandon Rhodes, TS Kelso, and David Vallado's team. Also, I'd like to thank Professor Steve\nPetersen (AC6P) of UCSC for pointing me in the correct directions.\n\n## License\n\nAll files marked with the License header at the top are Licensed. Any files unmarked by me or others are\nunlicensed, and are kept only as a resource for [Shashwat Kandadai and other developers] for testing.\n\nI chose the [MIT License](LICENSE.md) because this library is a derivative work off\n[Brandon Rhodes sgp4](https://pypi.python.org/pypi/sgp4/), and that is licensed with MIT. It just seemed simpler\nthis way, sub-licensing freedoms notwithstanding.\n\nI worked in the Dining Hall at UCSC for a month, which means I signed a form that gives UCSC partial ownership of\nanything I make while under their aegis, so I included them as owners of the copyright.\n\nPlease email all complaints to help@ucsc.edu\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/shashwatak/satellite-js.git"
  },
  "scripts": {
    "build": "rimraf lib dist && npm run transpile && npm run dist",
    "copy": "copyfiles -u 1 'dist/**/*' sgp4_verification/lib/sgp4",
    "dist": "npm run dist:es && npm run dist:umd:dev && npm run dist:umd:prod",
    "dist:es": "rollup --config rollup.config.es.js && node --require @babel/register commands/add-copyright.js 'dist/satellite.es.js'",
    "dist:umd": "rollup --config rollup.config.js",
    "dist:umd:dev": "cross-env NODE_ENV=development npm run dist:umd && node --require @babel/register commands/add-copyright.js 'dist/**/satellite.js'",
    "dist:umd:prod": "cross-env NODE_ENV=production npm run dist:umd && node --require @babel/register commands/add-copyright.js 'dist/**/satellite.min.js'",
    "lint": "eslint ./src",
    "lint:test": "eslint -c test/.eslintrc.json ./test",
    "prepublishOnly": "npm run lint && npm run lint:test && npm test && npm run build",
    "test": "mocha --recursive --require @babel/register test",
    "test:coverage": "rimraf coverage && istanbul cover _mocha -- --recursive --require @babel/register test",
    "test:coveralls": "npm run test:coverage && cat ./coverage/lcov.info | coveralls",
    "transpile": "babel src --out-dir lib --ignore indexUmd.js && node --require @babel/register commands/add-copyright.js 'lib/**/*.js'",
    "watch:es": "node --require @babel/register rollup.watch.es.js"
  },
  "version": "3.0.1"
}
